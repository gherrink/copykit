@layer utilities {
  /**
   * Base flex utility for creating flexible layouts
   *
   * @location utilities.flex Flex
   * @example
   * <div class="flex">
   *   <div class="bg px py">Item 1</div>
   *   <div class="bg px py">Item 2</div>
   * </div>
   */
  .flex {
    display: flex;
  }

  /**
   * Flex with gap spacing between items. Use gap utility to define gaps.
   * Gap size can be customized with gap-xs, gap-sm, gap-base, gap-lg, gap-xl modifiers.
   *
   * @location utilities.flex.gap Flex with Gap
   * @example
   * <div class="flex gap">
   *   <div class="bg px py">Item 1</div>
   *   <div class="bg px py">Item 2</div>
   * </div>
   * <div class="flex gap-xl">
   *   <div class="bg px py">Large gap</div>
   *   <div class="bg px py">Large gap</div>
   * </div>
   */
  .flex.gap,
  .flex[class*=" gap-"] {
    --gap-space: var(--space-base);
    --gap-space-x: var(--gap-space);
    --gap-space-y: var(--gap-space);
    --gap-x: calc(var(--space-unit) * var(--gap-space-x));
    --gap-y: calc(var(--space-unit) * var(--gap-space-y));

    gap: var(--gap-x) var(--gap-y);
  }

  /**
   * Flex with row direction (horizontal layout). Includes pull-right utility for right alignment.
   *
   * @location utilities.flex.row Flex Row
   * @example
   * <div class="flex row gap">
   *   <div class="bg px py">Left</div>
   *   <div class="bg px py">Right</div>
   * </div>
   * <div class="flex row gap mt">
   *   <div class="bg px py">Left</div>
   *   <div class="pull-right bg px py">Right 1</div>
   *   <div class="pull-right bg px py">Right 2</div>
   * </div>
   */
  .flex.row {
    flex-direction: row;

    > .pull-right:nth-child(1 of .pull-right) {
      margin-left: auto;
    }
  }

  /**
   * Flex with column direction (vertical layout)
   *
   * @location utilities.flex.column Flex Column
   * @example
   * <div class="flex column">
   *   <div class="bg px py">Top</div>
   *   <div class="bg px py">Bottom</div>
   * </div>
   */
  .flex.column {
    flex-direction: column;
  }

  /**
   * Flex with wrap enabled - items wrap to new lines when needed
   *
   * @location utilities.flex.wrap Flex Wrap
   * @example
   * <div class="flex row wrap gap">
   *   <div class="bg px py" style="width: 300px">Wide Item 1</div>
   *   <div class="bg px py" style="width: 300px">Wide Item 2</div>
   *   <div class="bg px py" style="width: 300px">Wide Item 3</div>
   * </div>
   */
  .flex.wrap {
    flex-wrap: wrap;
  }

  /**
   * Flex with no wrap - items stay on single line
   *
   * @location utilities.flex.nowrap Flex No Wrap
   * @example
   * <div class="flex row nowrap gap">
   *   <div class="bg px py" style="min-width: 200px">No wrap 1</div>
   *   <div class="bg px py" style="min-width: 200px">No wrap 2</div>
   *   <div class="bg px py" style="min-width: 200px">No wrap 3</div>
   * </div>
   */
  .flex.nowrap {
    flex-wrap: nowrap;
  }

  /**
   * Flex justify-content utilities for horizontal alignment
   *
   * @location utilities.flex.justify Flex Justify Content
   */

  /**
   * Flex justify-content: flex-start - align items to start
   *
   * @location utilities.flex.justify.start Justify Start
   * @example
   * <div class="flex row gap justify-start" style="background: rgb(var(--border-color) / 0.3); padding: var(--space-xs);">
   *   <div class="bg px py">Start 1</div>
   *   <div class="bg px py">Start 2</div>
   * </div>
   */
  .flex.justify-start {
    justify-content: flex-start;
  }

  /**
   * Flex justify-content: space-between - space items with equal space between
   *
   * @location utilities.flex.justify.between Justify Space Between
   * @example
   * <div class="flex row justify-between" style="background: rgb(var(--border-color) / 0.3); padding: var(--space-xs);">
   *   <div class="bg px py">Left</div>
   *   <div class="bg px py">Right</div>
   * </div>
   */
  .flex.justify-between {
    justify-content: space-between;
  }

  /**
   * Flex justify-content: space-around - space items with equal space around each
   *
   * @location utilities.flex.justify.around Justify Space Around
   * @example
   * <div class="flex row justify-around" style="background: rgb(var(--border-color) / 0.3); padding: var(--space-xs);">
   *   <div class="bg px py">Item 1</div>
   *   <div class="bg px py">Item 2</div>
   * </div>
   */
  .flex.justify-around {
    justify-content: space-around;
  }

  /**
   * Flex justify-content: space-evenly - space items with equal space everywhere
   *
   * @location utilities.flex.justify.evenly Justify Space Evenly
   * @example
   * <div class="flex row justify-evenly" style="background: rgb(var(--border-color) / 0.3); padding: var(--space-xs);">
   *   <div class="bg px py">Item 1</div>
   *   <div class="bg px py">Item 2</div>
   * </div>
   */
  .flex.justify-evenly {
    justify-content: space-evenly;
  }

  /**
   * Flex justify-content: flex-end - align items to end
   *
   * @location utilities.flex.justify.end Justify End
   * @example
   * <div class="flex row gap justify-end" style="background: rgb(var(--border-color) / 0.3); padding: var(--space-xs);">
   *   <div class="bg px py">End 1</div>
   *   <div class="bg px py">End 2</div>
   * </div>
   */
  .flex.justify-end {
    justify-content: flex-end;
  }

  /**
   * Flex align-items utilities for vertical alignment
   *
   * @location utilities.flex.items Flex Align Items
   */

  /**
   * Flex align-items: flex-start - align items to top
   *
   * @location utilities.flex.items.start Align Items Start
   * @example
   * <div class="flex row gap items-start" style="background: rgb(var(--border-color) / 0.3); height: 100px; padding: var(--space-xs);">
   *   <div class="bg px py">Top aligned</div>
   *   <div class="bg px py">Also top</div>
   * </div>
   */
  .flex.items-start {
    align-items: flex-start;
  }

  /**
   * Flex align-items: center - align items to center vertically
   *
   * @location utilities.flex.items.center Align Items Center
   * @example
   * <div class="flex row gap items-center" style="background: rgb(var(--border-color) / 0.3); height: 100px; padding: var(--space-xs);">
   *   <div class="bg px py">Centered</div>
   *   <div class="bg px py">Also centered</div>
   * </div>
   */
  .flex.items-center {
    align-items: center;
  }

  /**
   * Flex align-items: flex-end - align items to bottom
   *
   * @location utilities.flex.items.end Align Items End
   * @example
   * <div class="flex row gap items-end" style="background: rgb(var(--border-color) / 0.3); height: 100px; padding: var(--space-xs);">
   *   <div class="bg px py">Bottom aligned</div>
   *   <div class="bg px py">Also bottom</div>
   * </div>
   */
  .flex.items-end {
    align-items: flex-end;
  }

  /**
   * Flex align-items: stretch - stretch items to fill container height
   *
   * @location utilities.flex.items.stretch Align Items Stretch
   * @example
   * <div class="flex row gap items-stretch" style="background: rgb(var(--border-color) / 0.3); height: 100px; padding: var(--space-xs);">
   *   <div class="bg px py">Stretched</div>
   *   <div class="bg px py">Also stretched</div>
   * </div>
   */
  .flex.items-stretch {
    align-items: stretch;
  }

  /**
   * Flex align-items: baseline - align items along text baseline
   *
   * @location utilities.flex.items.baseline Align Items Baseline
   * @example
   * <div class="flex row gap items-baseline" style="background: rgb(var(--border-color) / 0.3); height: 100px; padding: var(--space-xs);">
   *   <div class="bg px py" style="font-size: var(--font-size-lg);">Large text</div>
   *   <div class="bg px py" style="font-size: var(--font-size-sm);">Small text</div>
   * </div>
   */
  .flex.items-baseline {
    align-items: baseline;
  }
}
